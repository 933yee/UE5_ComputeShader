#include "/Engine/Public/Platform.ush"

RWTexture2D<float4> VelocityOutputTexture; //v
Texture2D<float4> VelocityInput; //v
RWTexture2D<float4> PositionOutputTexture; //pos
Texture2D<float4> PositionInput;//pos
float2 TextureSize;
float Range;


float4 rangeChecker(float4 currentPos, float4 currentVel)
{
    float4 finalVelocity = currentVel;
    Range = Range / 2;
    if (currentPos.x >= Range)
    {
        if (finalVelocity.x > 0)
        {
            finalVelocity.x *= -1;
        }
    }
    else if (currentPos.x <= -Range)
    {
        if (finalVelocity.x < 0)
        {
            finalVelocity.x *= -1;
        }
    }
    if (currentPos.y >= Range)
    {
        if (finalVelocity.y > 0)
        {
            finalVelocity.y *= -1;
        }
    }
    else if (currentPos.y <= -Range)
    {
        if (finalVelocity.y < 0)
        {
            finalVelocity.y *= -1;
        }
    }
    if (currentPos.z >= Range)
    {
        if (finalVelocity.z > 0)
        {
            finalVelocity.z *= -1;
        }
    }
    else if (currentPos.z <= -Range)
    {
        if (finalVelocity.z < 0)
        {
            finalVelocity.z *= -1;
        }
    }
    return finalVelocity;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{
    float4 velocity = VelocityInput.Load(int3(ThreadId.x, ThreadId.y, 0));
    float4 position = PositionInput.Load(int3(ThreadId.x, ThreadId.y, 0));

    velocity = rangeChecker(position, velocity);

    VelocityOutputTexture[ThreadId.xy] = velocity;
    PositionOutputTexture[ThreadId.xy] = position + velocity;
}
